# myShell

myShell is a basic shell application that lets you execute commands and other programs from a command line.

# Basic Usage

First, run the `myshell` application in a terminal window.

You should see something like the following:

```
/home/user $
```

This is the prompt for you to enter a command.

The current directory that you are working in is listed at the start of the prompt. In this case, it is `/home/julian`.

To run a command, enter one and press the enter key:

```
/home/user $ cd Documents
/home/user/Documents $
```

You can run external programs by specifying their path (or, if they're in a directory on the `$PATH`, just specify their name like a built-in command):

```
/home/user $ ./hello
Hello, World!
```

## Built-In Commands

### `cd`

The `cd` command lets you change the current directory that you are working in.

```
/home/user $ cd Documents
/home/user/Documents $
```

### `clr`

The `clr` command clears the entire screen of any text and returns the cursor back to the top left.

### `dir`

The `dir` command lists all files and folders in a specific path.

If no path is specified, the current directory will be used.

```
/home/user $ dir Documents
.
..
Resume.docx
/home/user $ dir
.
..
Desktop
Documents
Pictures
Videos
```

### `environ`

The `environ` command lists all environment variables that are currently set.

```
/home/user $ environ
TMPDIR=/tmp
USER=user
PATH=/bin:/usr/bin:/usr/local/bin
SHELL=/bin/myshell
```

### `echo`

The `echo` command prints whatever comes after it to the screen.

```
/home/user $ echo Hello, World!
Hello, World!
```

### `help`

The `help` command shows this document using the system's `more` utility.

### `pause`

The `pause` command waits for you to press enter before proceeding.

```
/home/user $ pause
Press enter to continue...
/home/user $
```

### `quit`

The `quit` command closes the shell.

## Environment

Environment variables are externally set variables that describe the environment a program is running on.

The `environ` built-in command will list all environment variables that are currently set.

When myShell runs, it will automatically set the environment variable `SHELL` to the path to its executable. In addition, any programs that are executed by myShell will have the `PARENT` environment variable set to myShell's executable path.

## Redirection

By default, myShell will send all user output to the terminal (`stdout`), and will read all input that the user types into the terminal (`stdin`).

If desired, one can ask myShell to redirect its output or read its input from a file.

### Output

The `>` operator allows the output file to be set. If the file already exists, its content will be deleted. For example, to redirect the output of `dir` to the file `listing.txt`:

```
/home/user $ dir Documents > listing.txt
```

After this, the file `listing.txt` will contain the output of the `dir` command:

```
.
..
Resume.docx
```

The `>>` operator allows the output file to be set. However, it does not delete the content of the file if it already exists. Instead, the output will be appended to the pre-existing content. For example, if we `dir` the current directory and redirect the output to the file `listing.txt` in append mode:

```
/home/user $ dir >> listing.txt
```

After this, the file `listing.txt` will contain the output of both `dir` commands:

```
.
..
Resume.docx
.
..
Desktop
Documents
Pictures
Videos
```

### Input

The `>` operator allows the input to be set. For example, to have the `base64` command encode the contents of the file `listing.txt` instead of the terminal input:

```
/home/user $ base64 < listing.txt
LgouLgpSZXN1bWUuZG9jeAouCi4uCkRlc2t0b3AKRG9jdW1lbnRzClBpY3R1cmVzClZpZGVvcwo=
```
